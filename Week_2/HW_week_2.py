
# coding: utf-8

# # Циклы

# 1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа. Числа и знак операции вводятся пользователем. После выполнения вычисления программа не должна завершаться, а должна запрашивать новые данные для вычислений. Завершение программы должно выполняться при вводе символа '0' в качестве знака операции. Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и снова запрашивать знак операции. Также сообщать пользователю о невозможности деления на ноль, если он ввел 0 в качестве делителя.


def calc(a, b, c): # Функция с доступными операторами
    if c == '+':
        return a + b
    if c == '-':
        return a - b
    if c == '*':
        return a * b
    if c == '/':
        return a / b


while True: # В бесконечном цикле принимаем данные для вычислений
    num1 = int(input("Введите первое число: "))
    num2 = int(input("Введите второе число: "))
    operator = input("введите знак оператора '+' '-' '*' '/' или '0' для выхода ")
    
    if operator != '0': # Пока не подана команда выхода '0' выводятся результаты расчетов
        print(f"Результат вычисления: {calc(num1, num2, operator)}")
    else:
        print(f"Выход из программы")
        break


# 2. Посчитать четные и нечетные цифры введенного натурального числа. Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).


num = int(input("Введите число: "))

# Выделяем разрядность десятичного числа
n = str(num)
num_len = len(n)

i = 1 # Задаем смещение для вычленения старшего разряда

# Счетчики чет и нечета
even = 0
odd = 0

while i <= num_len: # Количество циклов определено разрядностью 
    if (num // 10 ** (num_len - i)) % 2 == 0: # Условие четности, остатком является старший разряд 2
        even += 1
    else:
        odd += 1         
    num = num - (num // 10 ** (num_len - i) * 10 ** (num_len - i)) # Смещение разрядности
    i = i + 1

print(f"Расчет завершен: \n четные - {even} ед.\n нечетные - {odd} ед.")    


# 3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. Например, если введено число 3486, то надо вывести число 6843.

num1 = int(input("Инверсия порядка цифр в числе... "))
num2 = 0
 
while num1 > 0:
    dig = num1 % 10; # Записываем последнюю цифру числа в буфер
    num1 = num1 // 10; # Исключаем эту цифру из числа
    num2 = num2 * 10 # Увеличиваем разрядность второго числа
    num2 = num2 + dig # Добавляем цифру из буфера

print(f"Результат: {n2}")


# 4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.

n = int(input("Количество элементов ряда: ")) # Вводим количество элементов ряда

# Объявляем счетчики длины ряда и суммы 
start = 1
i = 0
summ = 0

while i < n: # Операция выполняется по кол-ву элементов
    summ = summ + start
    start = start / -2
    i += 1
    
print(summ)


# 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно. Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.

start = 32 # Указываем первый и последний номера символов
end = 127

for i in range(start,end+1):
    print(chr(i),'-',i, end=' ') # Выводим на экран пары код-символ
    if (i - 1) % 10 ==0: # Начинаем вывод с новой строки для каждой десятой пары
        print()   


# 6. В программе генерируется случайное целое число от 0 до 100. Пользователь должен его отгадать не более чем за 10 попыток. После каждой неудачной попытки должно сообщаться больше или меньше введенное пользователем число, чем то, что загадано. Если за 10 попыток число не отгадано, то вывести загаданное число.

from random import random # Импортируем библиотеку
n = round(random() * 100) # Генерируем случ. число
i = 1 # Вводим счетчик попыток, начинаем с 1
print("Угадай число от 0 до 100 с 10 попыток") # Описание приглашения ввода
while i <= 10: # Пока счетчик попыток меньше, либо равен 10 опрашиваем пользователя
    u = int(input(str(i) + "-я попытка: "))
    if u > n: # Если указанное число больше сгененированного, оповещаем
        print("Загаданное число меньше")
    elif u < n: # Если указанное число меньше сгененированного, оповещаем
        print("Загаданное число больше")
    else: # Иначе выводится сообщение о равенстве. Прерывание цикла
        print(f"Верно, потрачено попыток: {i}")
        break
    i += 1 # Увеличиваем счетчик в цикле
else: # По завершению попыток прерывание цикла, вывод правильного ответа
    print(f"Попытки потрачены, ответ: {n}")


# 7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2, где n - любое натуральное число.

n = int(input("ВВедите натуральное число: ")) # Приглашение к вводу длины ряда
s = 0 # Буфер для суммы
for i in range(1,n+1): # Выполняем цикл количество раз, равное длине ряда
    s += i # Прибавляем к сумме шаг суммы - 1
m = n * (n + 1) // 2 # Вычисляем выражение для правой части равенства
print(f"1+2+3+...n... = {s}") # Выводим сумму левой части равенства
print(f"n(n+1)/2 = {m}") # Выводим сумму правой части равенства
print("Равенство доказано") # Выводим сообщение о равенстве выражений


# 8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел. Количество вводимых чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.

n = int(input("Сколько будет чисел? ")) # Приглашение к вводу количества чисел
d = int(input("Какую цифру считать? ")) # Пригашение к вводу искомой цифры для подсчета
count = 0 # Счетчик совпадений
for i in range(1,n+1): # Вводим числа указанное количество раз
    m = int(input("Число " + str(i) + ": ")) # 
    while m > 0: # Выполнение цикла заданное количество раз
        if m%10 == d: # Проверяем на совпадение последнюю цифру в числа
            count += 1 # Обновляем счетчик при совпадении
        m = m // 10 # Убираем 1 разряд в числе
 
print(f"Было введено {count} цифр '{d}'")


# 9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр. Вывести на экран это число и сумму его цифр.

n = int(input()) # Приглашение к вводу числа
max_s = 0 # Буфер для максимальной суммы цифр
max_m = 0 # Буфер для текущего числа в последовательности
while n != 0: # Выполняем цикл, пока пользователь не введет 0
    m = n 
    s = 0 # Операционная переменная для накопления суммы
    while n>0: # Цикл для расчета суммы цифр в числе
        s += n%10
        n //= 10
    if s > max_s: # Если сумма вновь введенного числа больше текущей суммы, обновляем сумму
        max_s = s
        max_m = m 
    n = int(input()) # Приглашение к вводу следующего числа
print('Число',max_m,'имеет максимальную сумму цифр:', max_s)

